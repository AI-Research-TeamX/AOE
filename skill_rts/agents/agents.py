from skill_rts.agents.llm_clients import LLMs
from skill_rts.game import GameState
from skill_rts import logger
from abc import ABC, abstractmethod
from omegaconf import OmegaConf


class Agent(ABC):
    def __init__(self, model: str, temperature: float, max_tokens: int):
        self.model = model
        self.temperature = temperature
        self.max_tokens = max_tokens
        self.client = LLMs(model, temperature, max_tokens)
    
    @abstractmethod
    def step(self, obs: GameState, *args, **kwargs) -> str:
        """Make a task plan based on the observation.

        Args:
            obs (GameState): observation of the game state

        Returns:
            str: task plan generated by the agent
        """
        raise NotImplementedError
    
    def reset(self):
        pass


class VanillaAgent(Agent):
    def __init__(self, model: str, temperature: float, max_tokens: int, player_id: int):
        super().__init__(model, temperature, max_tokens)
        self.player_id = player_id
        self.prompt_template = self._get_template()
    
    def step(self, obs: GameState, *args, **kwargs) -> str:
        prompt = self.prompt_template.format(observation=obs.to_string(), player_id=self.player_id)
        response = self.client(prompt)
        logger.debug(f"Prompt: {prompt}")
        logger.debug(f"Response: {response}")
        return response
    
    def _get_template(self):
        return OmegaConf.load("skill_rts/agents/template.yaml")["VANILLA"]


class CoTAgent(VanillaAgent):
    def _get_template(self):
        return OmegaConf.load("skill_rts/agents/template.yaml")["COT"]


class PLAPAgent(VanillaAgent):
    def _get_template(self):
        return OmegaConf.load("skill_rts/agents/template.yaml")["PLAP"]


if __name__ == "__main__":
    from skill_rts.envs import MicroRTSLLMEnv

    logger.set_level(logger.DEBUG)
    llm_cfg = {"model": "Qwen2.5-72B-Instruct", "temperature": 0, "max_tokens": 8192}
    agent1 = PLAPAgent(**llm_cfg, player_id=0)
    agent2 = CoTAgent(**llm_cfg, player_id=1)
    env = MicroRTSLLMEnv([agent1, agent2], run_dir="test", interval=200, record_video=True)
    payoffs, _ = env.run()
    print(payoffs)
